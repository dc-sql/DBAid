//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace dbaid.checkmk {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class SqlFiles {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal SqlFiles() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("dbaid.checkmk.SqlFiles", typeof(SqlFiles).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET NOCOUNT ON;
        ///
        ///DECLARE @drive_info AS TABLE(
        ///	[database_id] INT,
        ///	[data_type] VARCHAR(4),
        ///	[volume_mount_point] NVARCHAR(512),
        ///	[volume_total_mb] NUMERIC(20,2),
        ///	[volume_available_mb] NUMERIC(20,2)
        ///);
        ///
        ///DECLARE @file_info AS TABLE(
        ///	[database_id] INT,
        ///	[data_type] VARCHAR(4),
        ///	[size_used_mb] NUMERIC(20,2),
        ///	[size_reserved_mb] NUMERIC(20,2));
        ///
        ////* Sometimes dm_os_volume_stats doesn&apos;t return disk volume information due to wonky permissions in the OS. */
        ///INSERT INTO @drive_info
        ///	SELECT [mf].[ [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string chart_capacity_db {
            get {
                return ResourceManager.GetString("chart_capacity_db", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET NOCOUNT ON;
        ///
        ///DECLARE @cmd NVARCHAR(1000);
        ///
        ///DECLARE @drive_info AS TABLE([drive] CHAR(1),
        ///							[mb_free] NUMERIC(20,2));
        ///
        ///DECLARE @file_info AS TABLE([database_name] sysname,
        ///							[filegroup_id] INT,
        ///							[filegroup_name] NVARCHAR(128),
        ///							[filegroup_is_readonly] BIT,
        ///							[file_id] INT,
        ///							[file_type] NVARCHAR(4),
        ///							[drive] CHAR(1),
        ///							[size_used_mb] NUMERIC(20,2),
        ///							[size_reserved_mb] NUMERIC(20,2));
        ///
        ///DECLARE @space_info AS TABLE([database_name] sysname,
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string chart_capacity_fg {
            get {
                return ResourceManager.GetString("chart_capacity_fg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET NOCOUNT ON;
        ///
        ///DECLARE @countjob INT, @runtimejob INT, @failstatusjob INT, @cancelstatusjob INT;
        ///DECLARE @check_output TABLE([state] VARCHAR(8), [message] VARCHAR(4000));
        ///
        ///DECLARE @jobactivity TABLE (
        ///		[session_id] int NULL,
        ///		[job_id] uniqueidentifier NULL,
        ///		[job_name] sysname NULL,
        ///		[run_requested_date] datetime NULL,
        ///		[run_requested_source] sysname NULL,
        ///		[queued_date] datetime NULL,
        ///		[start_execution_date] datetime NULL,
        ///		[last_executed_step_id] int NULL,
        ///		[last_executed_step_dat [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string check_agentjob {
            get {
                return ResourceManager.GetString("check_agentjob", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET NOCOUNT ON;
        ///
        ///DECLARE @check_output TABLE([state] VARCHAR(8), [message] VARCHAR(4000));
        ///
        ///IF SERVERPROPERTY(&apos;IsHadrEnabled&apos;) IS NOT NULL
        ///BEGIN
        ///	INSERT INTO @check_output
        ///		EXEC [dbo].[sp_executesql] @stmt = N&apos;SELECT CASE 
        ///													WHEN [HA].[ag_state_is_enabled] = 1 AND
        ///														([RS].[synchronization_health] NOT IN (2) 
        ///														OR [RS].[connected_state] NOT IN (1)) 
        ///													THEN [HA].[ag_state_alert]
        ///													WHEN [HA].[ag_role_is_enabled] = 1 AND
        ///														([HA]. [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string check_alwayson {
            get {
                return ResourceManager.GetString("check_alwayson", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET NOCOUNT ON;
        ///
        ///DECLARE @backup_enabled INT, @backup_disabled INT, @major_version INT;
        ///DECLARE @preferred_backup TABLE ([name] sysname, [preferred_backup] BIT);
        ///DECLARE @last_backup TABLE ([name] sysname, [full_backup_date] DATETIME, [diff_backup_date] DATETIME, [tran_backup_date] DATETIME);
        ///DECLARE @check_output TABLE([state] VARCHAR(8), [message] VARCHAR(4000));
        ///
        ///SELECT @major_version = [major] FROM [system].[get_product_version]();
        ///
        ///IF @major_version &gt;= 11
        ///BEGIN
        ///	INSERT INTO @preferred_backup [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string check_backup {
            get {
                return ResourceManager.GetString("check_backup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET NOCOUNT ON;
        ///
        ///DECLARE @check_output TABLE([state] VARCHAR(8), [message] VARCHAR(4000));
        ///DECLARE @onlinecount INT, @restorecount INT, @recovercount INT;
        ///
        ///INSERT INTO @check_output
        ///	SELECT CASE WHEN [D].[state] IS NULL THEN [C].[database_check_alert] 
        ///		WHEN [D].[state] NOT IN (0,1,2) THEN [C].[database_check_alert] 
        ///		ELSE &apos;OK&apos; END AS [state]
        ///		,QUOTENAME([C].[name]) COLLATE DATABASE_DEFAULT 
        ///		+ &apos;=&apos; + UPPER(ISNULL([D].[state_desc],&apos;REMOVED&apos;)) COLLATE DATABASE_DEFAULT AS [message]
        ///	FROM [sys].[ [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string check_database {
            get {
                return ResourceManager.GetString("check_database", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET NOCOUNT ON;
        ///
        ///DECLARE @dbcheckdb INT, @dbnotcheckdb INT;
        ///DECLARE @check_output TABLE([state] VARCHAR(8), [message] VARCHAR(4000));
        ///
        ///IF OBJECT_ID(&apos;tempdb..#dbccinfo&apos;) IS NOT NULL 
        ///	DROP TABLE #dbccinfo;
        ///
        ///CREATE TABLE #dbccinfo 
        ///	([parent_object] NVARCHAR(255)
        ///	,[object] NVARCHAR(255)
        ///	,[field] NVARCHAR(255)
        ///	,[value] NVARCHAR(255)
        ///	,[db_name] NVARCHAR(128) NULL);
        ///
        ///EXECUTE [system].[execute_foreach_db] N&apos;USE [?];
        ///	INSERT #dbccinfo ([parent_object], [object], [field], [value]) EXEC (&apos;&apos;DBCC D [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string check_integrity {
            get {
                return ResourceManager.GetString("check_integrity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET NOCOUNT ON;
        ///
        ///DECLARE @check_output TABLE([state] VARCHAR(8), [message] VARCHAR(4000));
        ///
        ///DECLARE @primarycount INT;
        ///DECLARE @secondarycount INT;
        ///DECLARE @curdate_utc DATETIME;
        ///
        ///SELECT @curdate_utc = GETUTCDATE();
        ///
        ///SELECT @primarycount = COUNT(*)
        ///FROM [msdb].[dbo].[log_shipping_monitor_primary] [L]
        ///	INNER JOIN [checkmk].[config_database] [C]
        ///			ON [L].[primary_database] = [C].[name] COLLATE DATABASE_DEFAULT
        ///WHERE [C].[logshipping_check_enabled] = 1;
        ///
        ///SELECT @secondarycount = COUNT(*)
        ///FROM [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string check_logshipping {
            get {
                return ResourceManager.GetString("check_logshipping", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SET NOCOUNT ON;
        ///
        ///DECLARE @check_output TABLE([state] VARCHAR(8), [message] VARCHAR(4000));
        ///
        ///INSERT INTO @check_output
        ///SELECT CASE WHEN ([M].[mirroring_state] NOT IN (2,4) OR [C].[mirroring_check_role] != [M].[mirroring_role_desc] COLLATE DATABASE_DEFAULT) 
        ///		THEN [C].[mirroring_check_alert] ELSE &apos;OK&apos; END AS [state]
        ///	,&apos;database=&apos; + QUOTENAME([D].[name]) COLLATE DATABASE_DEFAULT
        ///	+ &apos;; state=&apos; + UPPER([M].[mirroring_state_desc]) COLLATE DATABASE_DEFAULT
        ///	+ &apos;; expected_role=&apos; + UPPER([C].[mirroring_che [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string check_mirroring {
            get {
                return ResourceManager.GetString("check_mirroring", resourceCulture);
            }
        }
    }
}
